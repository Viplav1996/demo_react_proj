Context and useContext
In React, we want to avoid the following problem of creating multiple props to pass data down two or more levels from a parent component.

        /* 
          React Context helps us avoid creating multiple duplicate props.
          
          This pattern is also called props drilling.
        */

        /* In this app, we want to pass the user data down to the Header component, but it first needs to go through a Main component which doesn't use it */
        function App() {
          const [user] = React.useState({ name: "Fred" });

          return (
            // First 'user' prop
            <Main user={user} />
          );
        }

        const Main = ({ user }) => (
          <>
            {/* Second 'user' prop */}
            <Header user={user} />
            <div>Main app content...</div>
          </>
        );



        const Header = ({ user }) => <header>Welcome, {user.name}!</header>;
Context is helpful for passing props down multiple levels of child components from a parent component.

        /* 
          Here is the previous example rewritten with Context.
          First we create context, where we can pass in default values
          We call this 'UserContext' because we're passing down user data
        */
        
        
        const UserContext = React.createContext();

        function App() {
          const [user] = React.useState({ name: "Fred" });

          return (
            {/* 
              We wrap the parent component with the Provider property 
              We pass data down the component tree on the value prop
             */}
            <UserContext.Provider value={user}>
              <Main />
            </UserContext.Provider>
          );
        }

        const Main = () => (
          <>
            <Header />
            <div>Main app content</div>
          </>
        );

        /* 
          We can't remove the two 'user' props. Instead, we can just use the Consumer property to consume the data where we need it
        */
        const Header = () => (
            {/* We use a pattern called render props to get access to the data */}
            <UserContext.Consumer>
              {user => <header>Welcome, {user.name}!</header>}
            </UserContext.Consumer>
        );
The useContext hook allows us to consume context in any function component that is a child of the Provider, instead of using the render props pattern.

        function Header() {
          /* We pass in the entire context object to consume it and we can remove the Consumer tags */
          const user = React.useContext(UserContext);

          return <header>Welcome, {user.name}!</header>;
        };
