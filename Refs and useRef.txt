Refs are a special attribute that are available on all React components. They allow us to create a reference to a given element / component when the component mounts.

useRef allows us to easily use React refs. We call useRef (at the top of the component) and attach the returned value to the element's ref attribute to refer to it.

Once we create a reference, we use the current property to modify (mutate) the element's properties or can call any available methods on that element (like .focus() to focus an input).

          function App() {
            const [query, setQuery] = React.useState("react hooks");
  /* We can pass useRef a default value.
     We don't need it here, so we pass in null to reference an empty object
  */
            const searchInput = useRef(null);

            function handleClearSearch() {
    /* 
      .current references the input element upon mount
      useRef can store basically any value in its .current property
    */
              searchInput.current.value = "";
              searchInput.current.focus();
            }

            return (
              <form>
                <input
                  type="text"
                  onChange={event => setQuery(event.target.value)}
                  ref={searchInput}
                />
                <button type="submit">Search</button>
                <button type="button" onClick={handleClearSearch}>
                  Clear
                </button>
              </form>
            );
          }
