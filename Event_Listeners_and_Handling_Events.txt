Listening for events on JSX elements versus HTML elements differs in a few important ways.

First, you cannot listen for events on React components â€“ only on JSX elements. Adding a prop called onClick, for example, to a React component would just be another property added to the props object.

      /* 
        The convention for most event handler functions is to prefix them with the word 'handle' and then the action they perform (i.e. handleToggleTheme)
      */
      function handleToggleTheme() {
        // code to toggle app theme
      }

      /* In HTML, onclick is all lowercase, plus the event handler includes a set of parentheses after being referenced */
      <button onclick="handleToggleTheme()">
        Toggle Theme
      </button>

      /* 
        In JSX, onClick is camelcase, like attributes / props.
        We also pass a reference to the function with curly braces.
      */
      <button onClick={handleToggleTheme}>
        Toggle Theme
      </button>
      The most essential React events to know are onClick, onChange, and onSubmit.

      onClick handles click events on JSX elements (namely on buttons)
      onChange handles keyboard events (namely a user typing into an input or textarea)
      onSubmit handles form submissions from the user
      function App() {
        function handleInputChange(event) {
          /* When passing the function to an event handler, like onChange we get access to data about the event (an object) */
          const inputText = event.target.value; // text typed into the input
          const inputName = event.target.name; // 'email' from name attribute
        }

        function handleClick(event) {
          /* onClick doesn't usually need event data, but it receives event data as well that we can use */
          console.log('clicked!');
          const eventType = event.type; // "click"
          const eventTarget = event.target; // <button>Submit</button>
        }

        function handleSubmit(event) {
          /* 
           When we hit the return button, the form will be submitted, as well as when a button with type="submit" is clicked.
           We call event.preventDefault() to prevent the default form behavior from taking place, which is to send an HTTP request and reload the page.
          */
          event.preventDefault();
          const formElements = event.target.elements; // access all element within form
          const inputValue = event.target.elements.emailAddress.value; // access the value of the input element with the id "emailAddress"
        }

        return (
          <form onSubmit={handleSubmit}>
            <input id="emailAddress" type="email" name="email" onChange={handleInputChange} />
            <button onClick={handleClick}>Submit</button>
          </form>
        );
      }
